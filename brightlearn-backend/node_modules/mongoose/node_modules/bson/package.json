{
  "name": "bson",
  "description": "A bson parser for node.js and the browser",
  "keywords": [
    "mongodb",
    "bson",
    "parser"
  ],
  "files": [
    "lib",
    "src",
    "bson.d.ts",
    "etc/prepare.js",
    "vendor"
  ],
  "types": "bson.d.ts",
  "version": "6.10.4",
  "author": {
    "name": "The MongoDB NodeJS Team",
    "email": "dbx-node@mongodb.com"
  },
  "license": "Apache-2.0",
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/mongodb/js-bson"
  },
  "bugs": {
    "url": "https://jira.mongodb.org/projects/NODE/issues/"
  },
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@microsoft/api-extractor": "^7.52.5",
    "@rollup/plugin-node-resolve": "^16.0.1",
    "@rollup/plugin-typescript": "^12.1.2",
    "@types/chai": "^4.3.17",
    "@types/mocha": "^10.0.7",
    "@types/node": "^22.15.3",
    "@types/sinon": "^17.0.4",
    "@types/sinon-chai": "^3.2.12",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "benchmark": "^2.1.4",
    "chai": "^4.4.1",
    "chalk": "^5.3.0",
    "dbx-js-tools": "github:mongodb-js/dbx-js-tools#main",
    "eslint": "^9.25.1",
    "eslint-config-prettier": "^10.1.2",
    "eslint-plugin-no-bigint-usage": "file:etc/eslint/no-bigint-usage",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-tsdoc": "^0.4.0",
    "magic-string": "^0.30.11",
    "mocha": "^10.7.0",
    "node-fetch": "^3.3.2",
    "nyc": "^15.1.0",
    "prettier": "^3.5.3",
    "rollup": "^4.40.1",
    "sinon": "^18.0.0",
    "sinon-chai": "^3.7.0",
    "source-map-support": "^0.5.21",
    "tar": "^7.4.3",
    "ts-node": "^10.9.2",
    "tsd": "^0.31.1",
    "typescript": "^5.8.3",
    "typescript-cached-transpile": "0.0.6",
    "uuid": "^11.1.0"
  },
  "tsd": {
    "directory": "test/types",
    "compilerOptions": {
      "strict": true,
      "target": "esnext",
      "module": "commonjs",
      "moduleResolution": "node"
    }
  },
  "config": {
    "native": false
  },
  "main": "./lib/bson.cjs",
  "module": "./lib/bson.node.mjs",
  "exports": {
    "browser": {
      "types": "./bson.d.ts",
      "default": "./lib/bson.mjs"
    },
    "react-native": "./lib/bson.rn.cjs",
    "default": {
      "types": "./bson.d.ts",
      "import": "./lib/bson.node.mjs",
      "require": "./lib/bson.cjs"
    }
  },
  "compass:exports": {
    "import": "./lib/bson.cjs",
    "require": "./lib/bson.cjs"
  },
  "engines": {
    "node": ">=16.20.1"
  },
  "scripts": {
    "pretest": "npm run build",
    "test": "npm run check:node && npm run check:web && npm run check:web-no-bigint",
    "check:node": "WEB=false mocha test/node",
    "check:tsd": "npm run build:dts && tsd",
    "check:web": "WEB=true mocha test/node",
    "check:web-no-bigint": "WEB=true NO_BIGINT=true mocha test/node",
    "check:granular-bench": "npm run build:bench && npm run check:baseline-bench && node ./test/bench/etc/run_granular_benchmarks.js",
    "check:spec-bench": "npm run build:bench && npm run check:baseline-bench && node ./test/bench/lib/spec/bsonBench.js",
    "check:custom-bench": "npm run build && npm run check:baseline-bench && node ./test/bench/custom/main.mjs",
    "check:baseline-bench": "node ./test/bench/etc/cpuBaseline.js",
    "build:bench": "cd test/bench && npx tsc",
    "build:ts": "node ./node_modules/typescript/bin/tsc",
    "build:dts": "npm run build:ts && api-extractor run --typescript-compiler-folder node_modules/typescript --local && node etc/clean_definition_files.cjs",
    "build:bundle": "rollup -c rollup.config.mjs",
    "build": "npm run build:dts && npm run build:bundle",
    "check:lint": "ESLINT_USE_FLAT_CONFIG=false eslint -v && ESLINT_USE_FLAT_CONFIG=false eslint --ext '.js,.ts' --max-warnings=0 src test && npm run build:dts && npm run check:tsd",
    "format": "ESLINT_USE_FLAT_CONFIG=false eslint --ext '.js,.ts' src test --fix",
    "check:coverage": "nyc --check-coverage npm run check:node",
    "prepare": "node etc/prepare.js",
    "release": "standard-version -i HISTORY.md"
  },
  "readme": "# BSON parser\n\nBSON is short for \"Binary JSON,\" and is the binary-encoded serialization of JSON-like documents.\nYou can learn more about it in [the specification](http://bsonspec.org).\n\n### Table of Contents\n\n- [Usage](#usage)\n- [Bugs/Feature Requests](#bugs--feature-requests)\n- [Installation](#installation)\n- [Documentation](#documentation)\n- [FAQ](#faq)\n\n\n### Release Integrity\n\nReleases are created automatically and signed using the [Node team's GPG key](https://pgp.mongodb.com/node-driver.asc). This applies to the git tag as well as all release packages provided as part of a GitHub release. To verify the provided packages, download the key and import it using gpg:\n\n```shell\ngpg --import node-driver.asc\n```\n\nThe GitHub release contains a detached signature file for the NPM package (named\n`bson-X.Y.Z.tgz.sig`).\n\nThe following command returns the link npm package. \n```shell\nnpm view bson@vX.Y.Z dist.tarball \n```\n\nUsing the result of the above command, a `curl` command can return the official npm package for the release.\n\nTo verify the integrity of the downloaded package, run the following command:\n```shell\ngpg --verify bson-X.Y.Z.tgz.sig bson-X.Y.Z.tgz\n```\n\n>[!Note]\nNo verification is done when using npm to install the package. The contents of the Github tarball and npm's tarball are identical.\n\n## Bugs / Feature Requests\n\nThink you've found a bug? Want to see a new feature in `bson`? Please open a case in our issue management tool, JIRA:\n\n1. Create an account and login: [jira.mongodb.org](https://jira.mongodb.org)\n2. Navigate to the NODE project: [jira.mongodb.org/browse/NODE](https://jira.mongodb.org/browse/NODE)\n3. Click **Create Issue** - Please provide as much information as possible about the issue and how to reproduce it.\n\nBug reports in JIRA for the NODE driver project are **public**.\n\n## Usage\n\nTo build a new version perform the following operations:\n\n```\nnpm install\nnpm run build\n```\n\n### Node.js or Bundling Usage\n\nWhen using a bundler or Node.js you can import bson using the package name:\n\n```js\nimport { BSON, EJSON, ObjectId } from 'bson';\n// or:\n// const { BSON, EJSON, ObjectId } = require('bson');\n\nconst bytes = BSON.serialize({ _id: new ObjectId() });\nconsole.log(bytes);\nconst doc = BSON.deserialize(bytes);\nconsole.log(EJSON.stringify(doc));\n// {\"_id\":{\"$oid\":\"...\"}}\n```\n\n### Browser Usage\n\nIf you are working directly in the browser without a bundler please use the `.mjs` bundle like so:\n\n```html\n<script type=\"module\">\n  import { BSON, EJSON, ObjectId } from './lib/bson.mjs';\n\n  const bytes = BSON.serialize({ _id: new ObjectId() });\n  console.log(bytes);\n  const doc = BSON.deserialize(bytes);\n  console.log(EJSON.stringify(doc));\n  // {\"_id\":{\"$oid\":\"...\"}}\n</script>\n```\n\n## Installation\n\n```sh\nnpm install bson\n```\n\n### MongoDB Node.js Driver Version Compatibility\n\nOnly the following version combinations with the [MongoDB Node.js Driver](https://github.com/mongodb/node-mongodb-native) are considered stable.\n\n|               | `bson@1.x` | `bson@4.x` | `bson@5.x` | `bson@6.x` |\n| ------------- | ---------- | ---------- | ---------- | ---------- |\n| `mongodb@6.x` | N/A        | N/A        | N/A        | ✓          |\n| `mongodb@5.x` | N/A        | N/A        | ✓          | N/A        |\n| `mongodb@4.x` | N/A        | ✓          | N/A        | N/A        |\n| `mongodb@3.x` | ✓          | N/A        | N/A        | N/A        |\n\n## Documentation\n\n### BSON\n\n[API documentation](https://mongodb.github.io/node-mongodb-native/Next/modules/BSON.html)\n\n<a name=\"EJSON\"></a>\n\n### EJSON\n\n- [EJSON](#EJSON)\n\n  - [.parse(text, [options])](#EJSON.parse)\n\n  - [.stringify(value, [replacer], [space], [options])](#EJSON.stringify)\n\n  - [.serialize(bson, [options])](#EJSON.serialize)\n\n  - [.deserialize(ejson, [options])](#EJSON.deserialize)\n\n<a name=\"EJSON.parse\"></a>\n\n#### _EJSON_.parse(text, [options])\n\n| Param             | Type                 | Default           | Description                                                                        |\n| ----------------- | -------------------- | ----------------- | ---------------------------------------------------------------------------------- |\n| text              | <code>string</code>  |                   |                                                                                    |\n| [options]         | <code>object</code>  |                   | Optional settings                                                                  |\n| [options.relaxed] | <code>boolean</code> | <code>true</code> | Attempt to return native JS types where possible, rather than BSON types (if true) |\n\nParse an Extended JSON string, constructing the JavaScript value or object described by that\nstring.\n\n**Example**\n\n```js\nconst { EJSON } = require('bson');\nconst text = '{ \"int32\": { \"$numberInt\": \"10\" } }';\n\n// prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }\nconsole.log(EJSON.parse(text, { relaxed: false }));\n\n// prints { int32: 10 }\nconsole.log(EJSON.parse(text));\n```\n\n<a name=\"EJSON.stringify\"></a>\n\n#### _EJSON_.stringify(value, [replacer], [space], [options])\n\n| Param             | Type                                        | Default           | Description                                                                                                                                                                                                                                                                                                                                        |\n| ----------------- | ------------------------------------------- | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| value             | <code>object</code>                         |                   | The value to convert to extended JSON                                                                                                                                                                                                                                                                                                              |\n| [replacer]        | <code>function</code> \\| <code>array</code> |                   | A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string |\n| [space]           | <code>string</code> \\| <code>number</code>  |                   | A String or Number object that's used to insert white space into the output JSON string for readability purposes.                                                                                                                                                                                                                                  |\n| [options]         | <code>object</code>                         |                   | Optional settings                                                                                                                                                                                                                                                                                                                                  |\n| [options.relaxed] | <code>boolean</code>                        | <code>true</code> | Enabled Extended JSON's `relaxed` mode                                                                                                                                                                                                                                                                                                             |\n| [options.legacy]  | <code>boolean</code>                        | <code>true</code> | Output in Extended JSON v1                                                                                                                                                                                                                                                                                                                         |\n\nConverts a BSON document to an Extended JSON string, optionally replacing values if a replacer\nfunction is specified or optionally including only the specified properties if a replacer array\nis specified.\n\n**Example**\n\n```js\nconst { EJSON } = require('bson');\nconst Int32 = require('mongodb').Int32;\nconst doc = { int32: new Int32(10) };\n\n// prints '{\"int32\":{\"$numberInt\":\"10\"}}'\nconsole.log(EJSON.stringify(doc, { relaxed: false }));\n\n// prints '{\"int32\":10}'\nconsole.log(EJSON.stringify(doc));\n```\n\n<a name=\"EJSON.serialize\"></a>\n\n#### _EJSON_.serialize(bson, [options])\n\n| Param     | Type                | Description                                          |\n| --------- | ------------------- | ---------------------------------------------------- |\n| bson      | <code>object</code> | The object to serialize                              |\n| [options] | <code>object</code> | Optional settings passed to the `stringify` function |\n\nSerializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n\n<a name=\"EJSON.deserialize\"></a>\n\n#### _EJSON_.deserialize(ejson, [options])\n\n| Param     | Type                | Description                                  |\n| --------- | ------------------- | -------------------------------------------- |\n| ejson     | <code>object</code> | The Extended JSON object to deserialize      |\n| [options] | <code>object</code> | Optional settings passed to the parse method |\n\nDeserializes an Extended JSON object into a plain JavaScript object with native/BSON types\n\n## Error Handling\n\nIt is our recommendation to use `BSONError.isBSONError()` checks on errors and to avoid relying on parsing `error.message` and `error.name` strings in your code. We guarantee `BSONError.isBSONError()` checks will pass according to semver guidelines, but errors may be sub-classed or their messages may change at any time, even patch releases, as we see fit to increase the helpfulness of the errors.\n\nAny new errors we add to the driver will directly extend an existing error class and no existing error will be moved to a different parent class outside of a major release.\nThis means `BSONError.isBSONError()` will always be able to accurately capture the errors that our BSON library throws.\n\nHypothetical example: A collection in our Db has an issue with UTF-8 data:\n\n```ts\nlet documentCount = 0;\nconst cursor = collection.find({}, { utf8Validation: true });\ntry {\n  for await (const doc of cursor) documentCount += 1;\n} catch (error) {\n  if (BSONError.isBSONError(error)) {\n    console.log(`Found the troublemaker UTF-8!: ${documentCount} ${error.message}`);\n    return documentCount;\n  }\n  throw error;\n}\n```\n\n## React Native\n\nBSON vendors the required polyfills for `TextEncoder`, `TextDecoder`, `atob`, `btoa` imported from React Native and therefore doesn't expect users to polyfill these. One additional polyfill, `crypto.getRandomValues` is recommended and can be installed with the following command:\n\n```sh\nnpm install --save react-native-get-random-values\n```\n\nThe following snippet should be placed at the top of the entrypoint (by default this is the root `index.js` file) for React Native projects using the BSON library. These lines must be placed for any code that imports `BSON`.\n\n```typescript\n// Required Polyfills For ReactNative\nimport 'react-native-get-random-values';\n```\n\nFinally, import the `BSON` library like so:\n\n```typescript\nimport { BSON, EJSON } from 'bson';\n```\n\nThis will cause React Native to import the `node_modules/bson/lib/bson.rn.cjs` bundle (see the `\"react-native\"` setting we have in the `\"exports\"` section of our [package.json](./package.json).)\n\n### Technical Note about React Native module import\n\nThe `\"exports\"` definition in our `package.json` will result in BSON's CommonJS bundle being imported in a React Native project instead of the ES module bundle. Importing the CommonJS bundle is necessary because BSON's ES module bundle of BSON uses top-level await, which is not supported syntax in [React Native's runtime hermes](https://hermesengine.dev/).\n\n## FAQ\n\n#### Why does `undefined` get converted to `null`?\n\nThe `undefined` BSON type has been [deprecated for many years](http://bsonspec.org/spec.html), so this library has dropped support for it. Use the `ignoreUndefined` option (for example, from the [driver](http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect) ) to instead remove `undefined` keys.\n\n#### How do I add custom serialization logic?\n\nThis library looks for `toBSON()` functions on every path, and calls the `toBSON()` function to get the value to serialize.\n\n```javascript\nconst BSON = require('bson');\n\nclass CustomSerialize {\n  toBSON() {\n    return 42;\n  }\n}\n\nconst obj = { answer: new CustomSerialize() };\n// \"{ answer: 42 }\"\nconsole.log(BSON.deserialize(BSON.serialize(obj)));\n```\n",
  "readmeFilename": "README.md",
  "_id": "bson@6.10.4",
  "dist": {
    "shasum": "5cc3fc5fbcfd81d642c64cbfda3a7de6d450e298"
  },
  "_from": "bson@^6.10.4",
  "_resolved": "https://registry.npmjs.org/bson/-/bson-6.10.4.tgz"
}
